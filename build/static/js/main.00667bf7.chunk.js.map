{"version":3,"sources":["reducers/quoteReducer.js","actions/types.js","reducers/index.js","store.js","components/DisplayQuote.js","actions/quoteAction.js","App.js","serviceWorker.js","index.js"],"names":["initialState","quoteData","newQuote","state","action","type","payload","combineReducers","qRed","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","DisplayQuote","props","nextQuote","bind","e","preventDefault","this","fetchQuote","id","onSubmit","quote","author","href","target","rel","size","React","Component","connect","content","dispatch","axios","get","then","res","data","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yRAEMA,EAAe,CACnBC,UAAW,IAcEC,EAXE,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCACjD,OAAOA,EAAOC,MACZ,ICRqB,YDSnB,MAAO,CACLJ,UAAWG,EAAOE,SAEtB,QACE,OAAOH,IEVEI,cAAgB,CAC7BC,KAAMN,ICEFO,EAAa,CAACC,KASLC,EAPDC,YACZC,EALmB,GAOnBC,YACEC,IAAe,WAAf,EAAmBN,K,oCCPjBO,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,UAAY,EAAKA,UAAUC,KAAf,gBAHA,E,sDAMTC,GACRA,EAAEC,iBACFC,KAAKL,MAAMM,e,+BAIX,OACE,yBAAKC,GAAG,WACN,wBAAIA,GAAG,QAAP,wBACA,0BAAMC,SAAUH,KAAKJ,UAAWM,GAAG,aACjC,6BAASA,GAAG,QACV,uBAAGA,GAAG,QAAQF,KAAKL,MAAMS,OACzB,uBAAGF,GAAG,UAAN,IAAiBF,KAAKL,MAAMU,SAE9B,6BAASH,GAAG,UACV,uBAAGA,GAAG,cAAcI,KAAK,kCAAkCC,OAAO,SAASC,IAAI,uBAC7E,kBAAC,IAAD,CAAWN,GAAG,OAAOO,KAAM,MAE7B,4BAAQ1B,KAAK,SAASmB,GAAG,aAAzB,mB,0CAQRF,KAAKL,MAAMM,iB,GAjCYS,IAAMC,WA0ClBC,eALS,SAAA/B,GAAK,MAAK,CAChCuB,MAAOvB,EAAMK,KAAKP,UAAUkC,QAC5BR,OAAQxB,EAAMK,KAAKP,UAAU0B,UAGS,CAACJ,WC5ClC,WACL,OAAO,SAASa,GACdC,IAAMC,IAAI,kCACTC,MAAK,SAAAC,GAAG,OAAIJ,EAAS,CACpB/B,KJPmB,YIQnBC,QAASkC,EAAIC,aDuCJP,CAAuClB,GE/BvC0B,E,uKARX,OACE,kBAAC,IAAD,CAAU/B,MAAOA,GACf,kBAAC,EAAD,W,GAJUqB,IAAMC,WCMJU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.00667bf7.chunk.js","sourcesContent":["import {NEW_QUOTE} from '../actions/types';\r\n\r\nconst initialState = {\r\n  quoteData: {}\r\n}\r\n\r\nconst newQuote = (state = initialState, action) => {\r\n  switch(action.type) {\r\n    case NEW_QUOTE:\r\n      return {\r\n        quoteData: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default newQuote;\r\n","export const NEW_QUOTE = 'NEW_QUOTE';\r\n","import {combineReducers} from 'redux';\r\nimport newQuote from './quoteReducer';\r\n\r\nexport default combineReducers({\r\n  qRed: newQuote\r\n});\r\n","import {createStore, applyMiddleware, compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware)\r\n));\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {fetchQuote} from '../actions/quoteAction';\r\nimport { FaTwitter } from 'react-icons/fa';\r\n\r\nclass DisplayQuote extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.nextQuote = this.nextQuote.bind(this);\r\n  }\r\n\r\n  nextQuote(e) {\r\n    e.preventDefault();\r\n    this.props.fetchQuote();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id='contain'>\r\n        <h1 id='head'>Inspirational Quotes</h1>\r\n        <form onSubmit={this.nextQuote} id='quote-box'>\r\n          <section id='data'>\r\n            <p id='text'>{this.props.quote}</p>\r\n            <p id='author'>-{this.props.author}</p>\r\n          </section>\r\n          <section id='action'>\r\n            <a id='tweet-quote' href='http://twitter.com/intent/tweet' target='_blank' rel=\"noopener noreferrer\">\r\n              <FaTwitter id='icon' size={28} />\r\n            </a>\r\n            <button type='submit' id='new-quote'>Next Quote</button>\r\n          </section>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.fetchQuote();\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  quote: state.qRed.quoteData.content,\r\n  author: state.qRed.quoteData.author\r\n});\r\n\r\nexport default connect(mapStateToProps, {fetchQuote})(DisplayQuote);\r\n","import {NEW_QUOTE} from './types';\r\nimport axios from 'axios';\r\n\r\nexport function fetchQuote() {\r\n  return function(dispatch) {\r\n    axios.get('https://api.quotable.io/random')\r\n    .then(res => dispatch({\r\n      type: NEW_QUOTE,\r\n      payload: res.data\r\n    }));\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport {Provider} from 'react-redux';\nimport store from './store';\nimport DisplayQuote from './components/DisplayQuote';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <DisplayQuote />\n      </Provider>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}